#!/bin/bash

mkdir -p /usr/local/var/log
exec &>/usr/local/var/log/locationchanger.log

sleep 2

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

OS_VERSION=$(sw_vers -productVersion | cut -d. -f1)

get_ssid_via_shortcut() {
    local tmp output status
    
    if ! command -v shortcuts >/dev/null 2>&1; then
        echo "$(date) Shortcuts CLI not found; falling back to legacy methods"
        return 1
    fi
    
    tmp=$(mktemp 2>/dev/null)
    if [ -z "$tmp" ]; then
        echo "$(date) Failed to create temporary file for shortcut output"
        return 1
    fi
    
    if shortcuts run "Current Wi-Fi" --output-type public.plain-text --output-path "$tmp" >/dev/null 2>&1; then
        output=$(tr -d '\r' < "$tmp" | sed 's/^\s*//;s/\s*$//')
        rm -f "$tmp"
        if [ -n "$output" ]; then
            echo "$output"
            return 0
        fi
        echo "$(date) Shortcut returned an empty SSID; falling back to legacy methods"
    else
        status=$?
        rm -f "$tmp"
        echo "$(date) Failed to run shortcut \"Current Wi-Fi\" (exit $status). Run it once manually to grant permissions."
    fi
    
    return 1
}

if [ "$OS_VERSION" -ge "26" ]; then
    SSID=$(get_ssid_via_shortcut)
    if [ $? -ne 0 ] || [ -z "$SSID" ]; then
        SSID=$(system_profiler SPAirPortDataType | awk '/Current Network/ {getline;$1=$1; gsub(":",""); print;exit}')
    fi
elif [ "$OS_VERSION" -ge "15" ]; then
    SSID=$(system_profiler SPAirPortDataType | awk '/Current Network/ {getline;$1=$1; gsub(":",""); print;exit}')
else
    SSID=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I | awk -F ' SSID: ' '/ SSID:/ {print $2}')
fi
echo `date` "New SSID found: $SSID"

LOCATION=

Location_Automatic="Automatic"
Location_Home="Home"
Location_Work="Company Intranet"

SSID_TelekomPublic=Telekom
SSID_Home=HomeSSID
SSID_Work=WorkSSID

case $SSID in
	$SSID_TelekomPublic ) LOCATION="$Location_Automatic";;
	$SSID_Home          ) LOCATION="$Location_Home";;
	$SSID_Work  ) LOCATION="$Location_Work";;
esac
REASON="SSID changed to $SSID"

MAP_FILE=$SCRIPT_DIR/locationchanger.conf
if [ -f "$MAP_FILE" ]; then
  while IFS=' ' read -r loc wifi
  do
		if [[ "${loc}" == "#"*   ]]; then
			true
		elif [ -z "${loc}" ]; then
      true
		else
			wifi=$(echo $wifi | tr -d '"' )
			if [[ "$wifi" == "$SSID" ]]; then
					LOCATION="$loc"
					REASON="SSID changed to $SSID using mapping file"
					break
			fi
		fi
  done < "$MAP_FILE"
fi

if [ -z "$LOCATION" ]; then
	LOCATION="$Location_Automatic"
	REASON="Automatic Fallback"
fi

current_location=$(networksetup -getcurrentlocation)
if [ "$current_location" = "$LOCATION" ]; then
    exit
fi

if ! sudo /usr/local/bin/locationchanger-helper "$LOCATION"; then
		osascript -e "display notification \"Failed to Change Network Location to: $LOCATION\" with title \"Network Update Failure\""
    exit 1
fi
echo ""

EXTERNAL_CALLOUT="$SCRIPT_DIR/locationchanger.callout.sh"
if [[ -x "$EXTERNAL_CALLOUT" ]]; then
		echo "Calling external executable \"$EXTERNAL_CALLOUT\""
		output=$($EXTERNAL_CALLOUT "$LOCATION")
		exit_code=$?
		echo "exit code: $exit_code and output: $output"
fi

osascript -e "display notification \"Network Location Changed to $LOCATION\" with title \"Network Update\""

echo "--> Location Changer: $LOCATION - $REASON"

exit 0
